# Automake defaults to F77LINK.  Using FC to link will work whether FC is an MPI or non-MPI compiler.
F77LD = $(FC)

PPFCCOMPILE = $(FC) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(FPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) $(FCFLAGS_f)

.F.o:
	$(F77COMPILE) -c -o $@ $<

.f.o:
	$(PPFCCOMPILE) -c -o $@ $<

FC_MODEXT=mod
CLEANFILES=*.$(FC_MODEXT)
MODDIR=$(top_builddir)/model

# Current directory takes precedence over model/include/ and model/
AM_FCFLAGS = $(FC_MODINC)$(top_srcdir)/model/include
AM_FCFLAGS += $(FC_MODINC)$(MODDIR)
AM_LDFLAGS =

src_overrides := $(sort $(wildcard *.f) $(wildcard **/*.f))
obj_overrides := $(patsubst %.f,%.o,$(src_overrides))

SUFFIXES = .d

.DEFAULT_GOAL := mfix$(EXEEXT)

LIBMFIX = $(top_builddir)/libmfix.a

bin_PROGRAMS = mfix$(EXEEXT)
mfix_SOURCES = $(src_overrides)

# We need to add mfix.f to mfix_SOURCES because gfortran 4.4 complains about not
# finding MAIN if mfix.o is only in libmfix.a and not in the link command.
# However, we can't add model/mfix.f to mfix_SOURCES for Makefile.usr because
# then mfix.o is in $MFIX_HOME/model. So we copy it under $RUNDDIR.
mfix_SOURCES += $(builddir)/.build/mfix.f

mfix_LDADD = $(obj_overrides)
mfix_LDADD += $(builddir)/.build/read_database.$(OBJEXT)
mfix_LDADD += $(builddir)/.build/read_namelist.$(OBJEXT)
mfix_LDADD += $(LIBMFIX)

build:
	$(LN_S) $(top_builddir) $@

.PHONY: $(LIBMFIX) TAGS run test

# top level directory needs to be built first
$(LIBMFIX):
	$(MAKE) -C $(top_builddir) mfix$(EXEEXT)

clean-local:
	-$(MAKE) -C $(top_builddir) clean

# mfix.f needs to be built under $(builddir)
$(builddir)/.build/mfix.f:  $(LIBMFIX)
	@mkdir -p .build
	cp $(top_srcdir)/model/mfix.f $@

$(builddir)/.build/read_database.$(OBJEXT):  $(LIBMFIX)
$(builddir)/.build/read_namelist.$(OBJEXT):  $(LIBMFIX)

# read_namelist needs rebuilt in case usrnlst.inc is overridden
$(builddir)/.build/read_namelist.$(OBJEXT): $(top_srcdir)/model/read_namelist.f
	@mkdir -p .build
	$(PPFCCOMPILE) -c -o $@ $<

# read_database needs rebuilt to use the correct path to BURCAT.THR
$(builddir)/.build/read_database.$(OBJEXT): $(top_srcdir)/model/read_database.f
	@mkdir -p .build
	$(PPFCCOMPILE) $(FC_DEFINE)BURCAT_THR="'$(top_srcdir)/model/thermochemical/BURCAT.THR'" -c -o $@ $<

species.inc: mfix.dat
	RUN_DIR=. $(top_srcdir)/config/rxn_preproc.sh

#########################################################################
#
#  "fortran-depcomp" generates makefile rules in "usrmodule.deps"
#
#      Include /dev/null so GREP doesn't hang if $^ is empty
#
#########################################################################

.f.d:
	@SRCDIR="$(srcdir)" OBJEXT="$(OBJEXT)" MODEXT="$(FC_MODEXT)" MODDIR="$(MODDIR)" \
	SED="$(SED)" GREP="$(GREP)" $(SHELL) $(top_srcdir)/build-aux/fortran-depcomp $^ > $@
	@SRCDIR="$(srcdir)" OBJEXT="$(OBJEXT)" MODEXT="$(FC_MODEXT)" MODDIR="$(MODDIR)" \
	SED="$(SED)" GREP="$(GREP)" $(SHELL) $(top_srcdir)/build-aux/update-usrdeps $@
	@for main_mod in `${GREP} -o -E "\S+\.${FC_MODEXT}" $@`; do \
	    echo "$${main_mod}: ${LIBMFIX}" >> $@; \
	done;
	@$(GREP) -i -l 'INCLUDE.*species.inc' /dev/null $^| $(SED) 's/$$/:\ species.inc/g' >> $@

@make_ifnotclean@
$(eval -include $(src_overrides:%.f=%.d) )
@make_endif@

CLEANFILES += usrmodule.deps species.inc $(src_overrides:%.f=%.d)
DISTCLEANFILES = Makefile postmfix$(EXEEXT)

################################################################
#                                                              #
#      convenience target for postmfix                         #
#                                                              #
################################################################

postmfix$(EXEEXT): $(LIBMFIX)
	$(MAKE) -C $(top_builddir) $@
	rm -f $@
	$(LN_S) $(top_builddir)/$@ $@

################################################################
#                                                              #
#      OpenMP and MPI support                                  #
#                                                              #
#      --enable-smp and --enable-dmp options in configure.ac   #
#                                                              #
################################################################

if OPENMP
AM_FCFLAGS += $(OPENMP_FCFLAGS)
AM_LDFLAGS += $(OPENMP_FCFLAGS)
endif

if MPI
AM_FCFLAGS += $(FC_DEFINE)MPI
AM_LDFLAGS += $(FC_DEFINE)MPI
endif

################################################################
#      TAU support
################################################################
TAU_F90=@TAU_F90@
TAU_MAKEFILE=@TAU_MAKEFILE@
export TAU_F90
export TAU_MAKEFILE

################################################################
#      NETCDF support
################################################################
if USE_NETCDF
AM_FCFLAGS += $(FC_MODINC)$(NETCDF_INCLUDE)
mfix_LDADD += -L$(NETCDF_LIB) -lnetcdff
endif

################################################################
#      Socket server
################################################################
if USE_SOCKET
AM_FCFLAGS += $(FC_DEFINE)socket
endif

################################################################
#      run this case
################################################################

POST_SCRIPT=AUTOTEST/post.script.NEW

POST_dats := $(notdir $(wildcard AUTOTEST/POST*.dat))

run: postmfix$(EXEEXT) mfix$(EXEEXT)
	./mfix$(EXEEXT)
	if [ -e $(POST_SCRIPT) ]; then OMP_NUM_THREADS=1 ./postmfix$(EXEEXT) < $(POST_SCRIPT); fi

test: run
	for test_post_file in $(POST_dats); do \
	    numdiff -a 0.000001 -r 0.05 AUTOTEST/$$test_post_file $$test_post_file || echo "file $$test_post_file does not match"; \
	done

################################################################
#                                                              #
#  Use absolute paths in the Makefile, so it can be copied     #
#  to any mfix.dat directory.                                  #
#                                                              #
################################################################

top_build_prefix=$(abs_top_build_prefix)
top_builddir=$(abs_top_builddir)
top_srcdir=$(abs_top_srcdir)
