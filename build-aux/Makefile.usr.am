# Automake defaults to F77LINK.  Using FC to link will work whether FC is an MPI or non-MPI compiler.
F77LD = $(FC)

PPFCCOMPILE = $(FC) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(FPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) $(FCFLAGS_f)

.F.o:
	$(F77COMPILE) -c -o $@ $<

.f.o:
	$(PPFCCOMPILE) -c -o $@ $<

FC_MODEXT=mod
CLEANFILES=*.$(FC_MODEXT) *.so
MODDIR=$(top_builddir)/../model

# Current directory takes precedence over model/include/ and model/
INCS = $(FC_MODINC)$(top_srcdir)/../model/include $(FC_MODINC)$(MODDIR)
AM_FCFLAGS = $(INCS)
AM_LDFLAGS =

src_overrides := $(filter-out model/% post_mfix/%, $(sort $(wildcard *.f) $(wildcard **/*.f)))
obj_overrides := $(patsubst %.f,%.o,$(src_overrides))

SUFFIXES = .d

.DEFAULT_GOAL := mfix$(EXEEXT)

LIBMFIX = $(top_builddir)/libmfix.a

bin_PROGRAMS = mfix$(EXEEXT)
mfix_SOURCES = $(src_overrides)

# We need to add mfix.f to mfix_SOURCES because gfortran 4.4 complains about not
# finding MAIN if mfix.o is only in libmfix.a and not in the link command.
# However, we can't add model/mfix.f to mfix_SOURCES for Makefile.usr because
# then mfix.o is in $MFIX_HOME/model. So we copy it under $RUNDDIR.
mfix_SOURCES += $(builddir)/.build/mfix.f

mfix_LDADD = $(obj_overrides)
mfix_LDADD += $(builddir)/.build/read_database.$(OBJEXT)
mfix_LDADD += $(builddir)/.build/read_namelist.$(OBJEXT)
mfix_LDADD += $(LIBMFIX)

.PHONY: TAGS test $(LIBMFIX) .build

# top level directory needs to be built first
$(LIBMFIX):
	$(MAKE) -C $(top_builddir) mfix$(EXEEXT)

$(LIBMFIX).md5: $(LIBMFIX)
	@$(MD5SUM) $< | cmp -s $@ -; if test $$? -ne 0; then $(MD5SUM) $< > $@; fi

clean-local:
	-$(MAKE) -C $(top_builddir) clean

# mfix.f needs to be built under $(builddir)
$(builddir)/.build/mfix.f:  $(LIBMFIX).md5
	@mkdir -p .build
	cp $(top_srcdir)/../model/mfix.f $@

$(builddir)/.build/read_database.$(OBJEXT):  $(LIBMFIX).md5
$(builddir)/.build/read_namelist.$(OBJEXT):  $(LIBMFIX).md5

# read_namelist needs rebuilt in case usrnlst.inc is overridden
$(builddir)/.build/read_namelist.$(OBJEXT): $(top_srcdir)/../model/read_namelist.f
	@mkdir -p .build
	$(PPFCCOMPILE) -c -o $@ $<

# read_database needs rebuilt to use the correct path to BURCAT.THR
$(builddir)/.build/read_database.$(OBJEXT): $(top_srcdir)/../model/read_database.f
	@mkdir -p .build
	$(PPFCCOMPILE) $(FC_DEFINE)BURCAT_THR="'$(top_srcdir)/../model/thermochemical/BURCAT.THR'" -c -o $@ $<

species.inc: mfix.dat
	RUN_DIR=. $(top_srcdir)/../config/rxn_preproc.sh

################################################################
#                                                              #
#  Use script "fdep" to find dependencies among source files.  #
#  Ignoring the following modules:                             #
#  - omp_lib (OpenMP)                                          #
#  - netcdf                                                    #
#      Include /dev/null so GREP doesn't hang if $^ is empty   #
################################################################
DEP_IGN := -i omp_lib -i netcdf -i mpi

.f.d:
	$(top_builddir)/fdep $(DEP_IGN) $(INCS) -m $(MODDIR) -o $(@D) $^
	@SRCDIR="$(srcdir)" OBJEXT="$(OBJEXT)" MODEXT="$(FC_MODEXT)" MODDIR="$(MODDIR)" \
	SED="$(SED)" GREP="$(GREP)" $(SHELL) $(top_srcdir)/update-usrdeps $@
	@for main_mod in `${GREP} -o -E "\S+\.${FC_MODEXT}" $@`; do echo "$${main_mod}: ${LIBMFIX}" >> $@; done;
	@$(GREP) -i -l 'INCLUDE.*species.inc' /dev/null $^| $(SED) 's/$$/:\ species.inc/g' >> $@

CLEANS := clean distclean mostlyclean
@make_ifnotclean@
$(eval -include $(src_overrides:%.f=%.d) )
@make_endif@

CLEANFILES += usrmodule.deps species.inc $(src_overrides:%.f=%.d)
DISTCLEANFILES = Makefile postmfix$(EXEEXT)

################################################################
#                                                              #
#      convenience target for postmfix                         #
#                                                              #
################################################################

postmfix$(EXEEXT): $(LIBMFIX).md5
	$(MAKE) -C $(top_builddir) $@
	-rm -f $@
	$(LN_S) $(top_builddir)/$@ $@

################################################################
#                                                              #
#           MFIX GUI                                           #
#                                                              #
################################################################

if PYTHON
ui_files = \
	$(top_srcdir)/../mfixgui/uifiles/general.ui \
	$(top_srcdir)/../mfixgui/uifiles/geometry.ui \
	$(top_srcdir)/../mfixgui/uifiles/gui.ui \
	$(top_srcdir)/../mfixgui/uifiles/mesh.ui \
	$(top_srcdir)/../mfixgui/uifiles/model_setup.ui \
	$(top_srcdir)/../mfixgui/uifiles/monitors.ui \
	$(top_srcdir)/../mfixgui/uifiles/numerics.ui \
	$(top_srcdir)/../mfixgui/uifiles/output.ui \
	$(top_srcdir)/../mfixgui/uifiles/post_processing.ui \
	$(top_srcdir)/../mfixgui/uifiles/regions.ui \
	$(top_srcdir)/../mfixgui/uifiles/run.ui \
	$(top_srcdir)/../mfixgui/uifiles/species_popup.ui \
	$(top_srcdir)/../mfixgui/uifiles/vtk.ui

.ui.py:
	$(PYUIC) -o $@ $^

ui_py = $(ui_files:%.ui=%.py)

ui: $(ui_py)

endif

################################################################
#                                                              #
#           pymfix Python module                               #
#                                                              #
################################################################

if PYTHON

lib_LTLIBRARIES = libmfixsolver.la
libmfixsolver_la_FCFLAGS = $(PYTHON_FCFLAGS)
libmfixsolver_la_LIBADD = $(LIBMFIX)
libmfixsolver_la_SOURCES = mfixsolver-f2pywrappers.f mfixsolver-f2pywrappers2.f90 mfixsolvermodule.c
libmfixsolver_la_LDFLAGS = -avoid-version -module -shared -export-dynamic

AM_FCFLAGS += $(patsubst %,-Xlinker -rpath=%, $(subst :, ,$(LD_LIBRARY_PATH)))

pymfix_src = \
	$(top_srcdir)/../model/param_mod.f \
	$(top_srcdir)/../model/param1_mod.f \
	$(top_srcdir)/../model/dmp_modules/compar_mod.f \
	$(top_srcdir)/../model/dmp_modules/debug_mod.f \
	$(top_srcdir)/../model/dmp_modules/parallel_mpi_mod.f \
	$(top_srcdir)/../model/fldvar_mod.f \
	$(top_srcdir)/../model/des/discretelement_mod.f \
	$(top_srcdir)/../model/des/des_time_march.f \
	$(top_srcdir)/../model/iterate.f \
	$(top_srcdir)/../model/residual_mod.f \
	$(top_srcdir)/../model/time_step.f \
	$(top_srcdir)/../model/main.f \
	$(top_srcdir)/../model/run_mod.f

pymfix_OBJECTS = $(pymfix_src:%.f=%.o)

mfix$(EXEEXT): mfixsolver.so
		-rm -f $@
		$(LN_S) $(top_srcdir)/../mfixgui/pymfix.py $@

mfixsolver.so: $(LIBMFIX).md5
mfixsolver-f2pywrappers.f  mfixsolver-f2pywrappers2.f90  mfixsolvermodule.c: $(pymfix_src)
	$(F2PY) -m mfixsolver $(pymfix_src)

endif

################################################################
#                                                              #
#      OpenMP and MPI support                                  #
#                                                              #
#      --enable-smp and --enable-dmp options in configure.ac   #
#                                                              #
################################################################

if OPENMP
AM_FCFLAGS += $(OPENMP_FCFLAGS)
AM_LDFLAGS += $(OPENMP_FCFLAGS)
endif

if MPI
AM_FCFLAGS += $(FC_DEFINE)MPI
AM_LDFLAGS += $(FC_DEFINE)MPI
PYTHON_FCFLAGS += $(FC_DEFINE)MPI

test: postmfix$(EXEEXT) mfix$(EXEEXT) ## Run tests
	MPICMD="$(MPICMD)" ${top_srcdir}/runtests.sh
else
test: postmfix$(EXEEXT) mfix$(EXEEXT) ## Run tests
	${top_srcdir}/runtests.sh
endif

################################################################
#      TAU support
################################################################
TAU_F90=@TAU_F90@
TAU_MAKEFILE=@TAU_MAKEFILE@
export TAU_F90
export TAU_MAKEFILE

################################################################
#      NETCDF support
################################################################

if NETCDF
AM_FCFLAGS += $(FC_MODINC)$(NETCDF_INCDIR) $(FC_DEFINE)NETCDF
AM_FCFLAGS += $(FC_MODINC)$(NETCDFF_INCDIR) $(FC_DEFINE)NETCDFF
AM_LDFLAGS += -L@NETCDF_LIBDIR@ -l@NETCDF_LIBNAME@ -L@NETCDFF_LIBDIR@ -l@NETCDFF_LIBNAME@
endif

################################################################
#                                                              #
#      MKL support (only with Intel Fortran compiler)          #
#                                                              #
################################################################

if MKL
AM_FCFLAGS += -mkl
AM_LDFLAGS += -mkl
endif

################################################################
#                                                              #
#      Convert unformatted output to bigendian (for Paraview)  #
#                                                              #
################################################################

if GNU
AM_FCFLAGS += -fconvert=big-endian
endif

if INTEL
AM_FCFLAGS += -convert big_endian
endif

if PGI
AM_FCFLAGS += -byteswapio
endif

if IBM
AM_FCFLAGS += -qufmt=be
endif

################################################################
#      run this case
################################################################

run_t0: postmfix$(EXEEXT) mfix$(EXEEXT) ## run case to TSTOP=0 to run checks
	OMP_NUM_THREADS=1 ./mfix$(EXEEXT) TSTOP=0 NODESI=1 NODESJ=1 NODESK=1

################################################################
#                                                              #
#  Use absolute paths in the Makefile, so it can be copied     #
#  to any mfix.dat directory.                                  #
#                                                              #
################################################################

top_build_prefix=$(abs_top_build_prefix)
top_builddir=$(abs_top_builddir)
top_srcdir=$(abs_top_srcdir)
