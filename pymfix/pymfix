#!/usr/bin/env python

"""The pymfix script starts mfix from Python, with a web server running for
interactive control of the run."""

import getopt
import importlib
import json
import os
import sys
import tempfile
import threading
import time
import traceback

from flask import Flask, render_template, request, redirect, url_for

sys.path.append(os.getcwd())

# Fortran modules are in uppercase since Fortran uses uppercase (even though it's
# conventional to only use uppercase for constants)
from mfix import compar as COMPAR
from mfix import iterate as ITERATE
from mfix import main as MAIN
from mfix import discretelement as DEM
from mfix import residual as RESIDUAL
from mfix import run as RUN
from mfix import read_input as READ_INPUT
from mfix import step as STEP
from mfix import usr_dispatch as USR_DISPATCH

PYMFIX_DIR = os.path.dirname(os.path.realpath(__file__))
FLASK_APP = Flask(__name__, static_folder=PYMFIX_DIR+'/static',
                  template_folder=PYMFIX_DIR+'/templates')
FLASK_APP.config['SECRET_KEY'] = 'secret!'

residuals = None

# import logging
# log = logging.getLogger('werkzeug')
# log.setLevel(logging.ERROR)

def pymfix_usrs(sub_name):
    """ call <sub_name>.py if it exists, otherwise call the Fortran version """
    mod_name = sub_name.lower()
    usr_filename = os.path.join(os.getcwd(), '%s.py' % mod_name)
    if os.path.isfile(usr_filename):
        print("Python override of: ",usr_filename)
        usr_py = open(usr_filename)
        mod = importlib.import_module(mod_name)
        getattr(mod,mod_name)()
    else:
        print("No Python override of: ",usr_filename)
        USR_DISPATCH.mfix_usrs(sub_name.upper())
    return 0

def pymfix_usrs_rates(ijk, rates):
    """ call usr_rates.py if it exists, otherwise call the Fortran version """
    mod_name = 'usr_rates'
    usr_filename = os.path.join(os.getcwd(), '%s.py' % mod_name)
    if os.path.isfile(usr_filename):
        print("Python override of: ",usr_filename)
        usr_py = open(usr_filename)
        mod = importlib.import_module(mod_name)
        print("rates has size", len(rates))
        print("rates is", rates)
        getattr(mod,mod_name)(ijk, rates)
    else:
        # print("No Python override of: ",usr_filename)
        USR_DISPATCH.mfix_usrs_rates(ijk, rates)
    return rates

def pymfix_write_usrs1(LL):
    """ call <sub_name>.py if it exists, otherwise call the Fortran version """
    mod_name = 'WRITE_USR1'
    usr_filename = os.path.join(os.getcwd(), '%s.py' % mod_name)
    if os.path.isfile(usr_filename):
        print("Python override of: ",usr_filename)
        usr_py = open(usr_filename)
        mod = importlib.import_module(mod_name)
        getattr(mod,mod_name)(L)
    else:
        print("No Python override of: ",usr_filename)
        USR_DISPATCH.mfix_write_usrs1(LL)
    return 0

def main():
    """The main function starts MFIX on a separate thread, then start the Flask server. """

    port, keyword_args = parse_command_line_arguments()

    mfix_inst = Mfix(keyword_args)
    mfix_inst.start()

    # start the Flask server on rank 0
    if COMPAR.mype == 0:
        try:
            FLASK_APP.run(host='0.0.0.0', port=port, debug=True, use_reloader=False)
        except KeyboardInterrupt:
            traceback.print_exc()
            # If we get here, the user hit Ctrl-C to shutdown the server,
            # so we call _exit() to kill the run_mfix thread.
            os._exit(0)
    else:
        # nothing else for rank>0 to do
        while True:
            time.sleep(10)


class Mfix:
    " Class to represent the running instance of MFIX "

    mfix_stopped = True
    pymfix_running = True
    requests = {}
    responses = {}

    def __init__(self, keyword_args):
        " constructor "
        self.keyword_args = keyword_args

    def start(self):
        " start the MFIX thread"
        threading.Thread(target=self.run_mfix, kwargs={"keyword_args":self.keyword_args}).start()
        # wait for the MFIX thread to initialize COMPAR.mype
        time.sleep(0.1)

    @classmethod
    def run_mfix(cls, keyword_args=None):
        "Main thread for running MFIX itself"

        RUN.interactive = True

        for arg in keyword_args:
            MAIN.add_command_line_argument(arg)

        MAIN.initialize()
        READ_INPUT.get_data()
        MAIN.initialize_2(pymfix_usrs)

        if (DEM.discrete_element and not DEM.des_continuum_coupled):
            if RUN.dem_solids:
                DEM.des_time_march()
            if RUN.pic_solids:
                DEM.pic_time_march()
        else:

            while cls.pymfix_running:
                cls.check_requests()
                if cls.mfix_stopped or RUN.tstop <= RUN.time:
                    time.sleep(0.1)
                else:
                    cls.do_step()

                    if RUN.steady_state:
                        break

        MAIN.finalize(pymfix_usrs)

    @classmethod
    def do_step(cls):
        "Run one timestep"
        STEP.time_step_init(pymfix_usrs, pymfix_usrs_rates, pymfix_write_usrs1)

        step_incomplete = True
        while step_incomplete:
            ITERATE.iterate_init()
            while ITERATE.nit < ITERATE.max_nit and not (ITERATE.converged or ITERATE.diverged):
                ITERATE.nit = ITERATE.nit + 1
                ITERATE.do_iteration(pymfix_usrs,pymfix_usrs_rates)
                cls.check_requests()
                cls.emit_residuals()

            ITERATE.post_iterate()

            step_incomplete = ITERATE.adjustdt(pymfix_usrs_rates) and not RUN.steady_state

        STEP.time_step_end(pymfix_usrs, pymfix_usrs_rates, pymfix_write_usrs1)


    @classmethod
    def emit_residuals(cls):
        """print residuals to socketio client"""

        output = {}
        output['nit'] = str(ITERATE.nit)
        output['residuals'] = []
        if RESIDUAL.group_resid:
            for res_id in range(len(RESIDUAL.resid_grp_string)):
                output['residuals'].append((str(RESIDUAL.get_resid_grp_string(res_id)),
                                            str(RESIDUAL.get_resid_grp(res_id))))
        else:
            for res_id in range(len(RESIDUAL.resid_string)):
                output['residuals'].append((str(RESIDUAL.get_resid_string(res_id)),
                                            str(RESIDUAL.get_resid(res_id))))

        global residuals
        residuals = json.dumps(output)


    @classmethod
    def check_requests(cls):
        "check for requests sent by the Flask thread"

        if cls.requests:
            # requests would only arrive at rank 0
            req_id, cmd_args = cls.requests.popitem()
        else:
            # command is empty for rank>0, or when rank 0 hasn't received anything
            req_id = None
            cmd_args = (None, None)

        json_cmd_args = json.dumps(cmd_args)
        # broadcast command from rank 0 to all ranks
        json_cmd_args = MAIN.do_mpi_bcast(json_cmd_args)
        json_cmd_args = json_cmd_args.tostring().rstrip()
        json_cmd_args = json_cmd_args.decode('utf-8')
        command, args = json.loads(json_cmd_args)

        if command:
            cmd = command.split(' ')[0].lower().strip()

            if hasattr(cls, cmd):
                cls.responses[req_id] = getattr(cls, cmd)(args)
            else:
                cls.responses[req_id] = 500, 'UNRECOGNIZED COMMAND\n'

    @classmethod
    def begin(cls, _):
        " start "
        cls.mfix_stopped = False
        return 200, "STARTING MFIX"

    @classmethod
    def halt(cls, _):
        " stop "
        cls.mfix_stopped = True
        return 200, "STOPPING MFIX"

    @classmethod
    def write_dbg_vt(cls, _):
        " call write_dbg_vtu_and_vtp_files "
        MAIN.do_write_dbg_vtu_and_vtp_files()
        return 200, 'Calling WRITE_DBG_VTU_AND_VTP_FILES\n'

    @classmethod
    def backupres(cls, _):
        " backup resource files"
        MAIN.do_backupres()
        return 200, 'BACKING UP RESOURCE FILES\n'

    @classmethod
    def reinit(cls, _):
        " reinitialize "
        MAIN.do_reinit(_.get('filename', None))
        return 200, 'REINITIALIZING MFIX\n'

    @classmethod
    def exit(cls, _):
        " run_mfix thread should exit cleanly "
        cls.pymfix_running = False
        return 200, 'EXITING MFIX\n'

    @classmethod
    def abort(cls, _):
        " exit abruptly"
        MAIN.do_abort()
        # should never get here
        return 200, 'ABORTING MFIX\n'

    @classmethod
    def step(cls, args):
        " take one or more timesteps "
        stepcount = int(args.get('stepcount', None)[0])
        if RUN.tstop <= RUN.time:
            RUN.tstop = RUN.tstop + stepcount*RUN.dt
        for _ in range(stepcount):
            cls.do_step()
        return 200, 'DOING %s TIMESTEP(S)\n' % stepcount

    @classmethod
    def get(cls, args):
        " return the value of a variable in MFIX"

        mod = args.get('modname')
        var = args.get('varname')
        elem = args.get('elem', None)
        ids = args.get('ids', None)

        # slow things down for development
        time.sleep(COMPAR.mype)

        if var:
            if ids and len(ids.split(' ')) > 3:
                print("GOING TO GET IDS %s" % var)
                # FIXME
                # ii, jj, kk, i2, j2, k2 = command.split(' ')[3:9]
                # for i in range(int(ii), int(i2)+1):
                #     for j in range(int(jj), int(j2)+1):
                #         for k in range(int(kk), int(k2)+1):
                #             if cls.is_on_mype_owns(i, j, k):
                #                 eval_string = ('%s[%d]' % (var, cls.funijk(i, j, k)))
                #                 print("GOING TO EXECUTE: %s" % eval_string)
                #                 # eval(eval_string) # FIXME
                #                 print(COMPAR.mype, " set value for", i, j, k, cls.funijk(i, j, k))
                #             else:
                #                 print(COMPAR.mype, "does not own", i, j, k, cls.funijk(i, j, k))
            else:
                print("GOING TO EVALUATE %s" % var)
                try:
                    import mfix
                    val = getattr(getattr(mfix, mod), var)
                    try:
                        # give the full array if the client is asking for an array (not recommended)
                        val = val.tolist()
                    except:
                        pass
                    if elem:
                        elem = int(elem)
                        val = val[elem]
                    return 200, str(val)
                except AttributeError:
                    traceback.print_exc()
                    # TODO: use error code for REST call
                    val = "ERROR: could not evaluate "+var
                    return 400, val

    @classmethod
    def set(cls, args):
        " set a variable in MFIX "

        mod = args.get('modname')
        var = args.get('varname')
        elem = args.get('elem', None)
        val = args.get('varvalue', None)
        ids = args.get('ids', None)

        # slow things down for development
        time.sleep(COMPAR.mype)

        if var and val:
            if ids and len(ids.split(' ')) > 3:
                print("GOING TO SET IDS %s = %s" % (var, val))
                #FIXME
                # ii, jj, kk, i2, j2, k2 = command.split(' ')[3:9]
                # for i in range(int(ii), int(i2)+1):
                #     for j in range(int(jj), int(j2)+1):
                #         for k in range(int(kk), int(k2)+1):
                #             if cls.is_on_mype_owns(i, j, k):
                #                 exec_string = ('%s[%d] = %s' % (var, cls.funijk(i, j, k), val))
                #                 print("GOING TO EXECUTE: %s" % exec_string)
                #                 # exec(exec_string) # FIXME
                #                 print(COMPAR.mype, " set value for", i, j, k, cls.funijk(i, j, k))
                #             else:
                #                 print(COMPAR.mype, "does not own", i, j, k, cls.funijk(i, j, k))
            else:
                print("GOING TO SET %s.%s = %s" % (mod, var, val))
                try:
                    import mfix
                    mfix_mod = getattr(mfix, mod)
                    if elem:
                        elem = int(elem)
                        listvar = getattr(mfix_mod, var)
                        val = float(val[0])
                        listvar[elem] = val
                    else:
                        setattr(mfix_mod, var, val)
                    return 200, 'ok, I set %s to %s\n' % (var, val)
                except AttributeError:
                    # TODO: better error code REST response
                    return 500, 'ERROR could not set: %s to %s\n' % (var, val)

                print('ok, I set %s to %s\n' % (var, val))
        else:
            return 500, 'could not set %s to %s\n' % (var, val)

    # @classmethod
    # def funijk(cls, i, j, k):
    #     "reimplement FUNIJK in Python"
    #     return COMPAR.ijk_array_of[i, j, k]

    # @classmethod
    # def is_on_mype_owns(cls, li, lj, lk):
    #     "reimplement IS_ON_MYPE_OWNS in Python"
    #     is_owner = li >= COMPAR.istart and li <= COMPAR.iend and lj >= COMPAR.jstart \
    #                and lj <= COMPAR.jend and lk >= COMPAR.kstart and lk <= COMPAR.kend
    #     return is_owner

    @classmethod
    def do_command(cls, cmd, args=None):
        "Puts a command that was received over the web interface on the queue"
        req_id = threading.current_thread().ident
        cls.requests[req_id] = (cmd, args)
        while req_id not in cls.responses:
            time.sleep(0.1)
        resp = cls.responses[req_id]
        del cls.responses[req_id]

        return resp


# Route that will process the file upload
@FLASK_APP.route('/upload', methods=['POST'])
def upload():
    "upload a new mfix.dat file and then reinitialize"
    # Get the name of the uploaded file

    if not request.files['file']:
        return "Error, need to upload file when doing reinit.", \
            400, {'Content-Type': 'text/plain; charset=utf-8'}

    # mfix.dat.upload.* files are not used by pymfix, but are for the user's
    # benefit to keep track of mfix.dat changes when doing multiple reinits
    # during a run
    if COMPAR.mype == 0:
        upload_file = open('mfix.dat.upload.%s' % int(time.time()), 'w')
        request.files['file'].save(upload_file)
        upload_file.close()

    tmp = tempfile.NamedTemporaryFile(delete=False, dir=os.getcwd())
    request.files['file'].save(tmp)
    status_code, data = Mfix.do_command("REINIT", args={'filename':tmp.name})
    os.unlink(tmp.name)

    if status_code != 200:
        return data

    return redirect(url_for('index'))


@FLASK_APP.route('/')
def index():
    "renders pymfix web interface"
    return render_template('index.html', mfixdat_filename=request.args.get('filename', ''))


@FLASK_APP.route('/set/<modname>/<varname>', methods=['POST'])
def set_variable(modname, varname):
    "sets a variable"
    args = dict(request.form)
    args['modname'] = modname
    args['varname'] = varname
    status_code, data = Mfix.do_command("SET", args=args)
    return data, status_code, {'Content-Type': 'text/plain; charset=utf-8'}

@FLASK_APP.route('/set/<modname>/<varname>/<elem>', methods=['POST'])
def set_variable_array(modname, varname, elem):
    "sets a variable"
    args = dict(request.form)
    args['modname'] = modname
    args['varname'] = varname
    args['elem'] = elem
    status_code, data = Mfix.do_command("SET", args=args)
    return data, status_code, {'Content-Type': 'text/plain; charset=utf-8'}

@FLASK_APP.route('/get/<modname>/<varname>', methods=['GET'])
def get_variable(modname, varname):
    "retrieves a variable"
    args = dict(request.args)
    args['modname'] = modname
    args['varname'] = varname
    status_code, data = Mfix.do_command("GET", args=args)
    return data, status_code, {'Content-Type': 'text/plain; charset=utf-8'}

@FLASK_APP.route('/get/<modname>/<varname>/<elem>', methods=['GET'])
def get_variable_array(modname, varname, elem):
    "retrieves a variable"
    args = dict(request.args)
    args['modname'] = modname
    args['varname'] = varname
    args['elem'] = elem
    status_code, data = Mfix.do_command("GET", args=args)
    return data, status_code, {'Content-Type': 'text/plain; charset=utf-8'}


@FLASK_APP.route('/write_dbg_vt', methods=['POST'])
def write_dbg_vt():
    "calls WRITE_DBG_VTU_AND_VTP_FILES"
    status_code, data = Mfix.do_command("WRITE_DBG_VT")
    return data, status_code, {'Content-Type': 'text/plain; charset=utf-8'}


@FLASK_APP.route('/backupres', methods=['POST'])
def backupres():
    "calls BACKUP_RES"
    status_code, data = Mfix.do_command("BACKUPRES")
    return data, status_code, {'Content-Type': 'text/plain; charset=utf-8'}


@FLASK_APP.route('/exit', methods=['POST'])
def exit_mfix():
    "exits the main loop in run_mfix"
    status_code, data = Mfix.do_command("EXIT")
    time.sleep(1) # wait for MFIX thread to end
    os._exit(0)
    return data, status_code, {'Content-Type': 'text/plain; charset=utf-8'}


@FLASK_APP.route('/abort', methods=['POST'])
def abort():
    "calls MFIX_EXIT"
    status_code, data = Mfix.do_command("ABORT")
    return data, status_code, {'Content-Type': 'text/plain; charset=utf-8'}


@FLASK_APP.route('/step', methods=['POST'])
def step():
    "runs mfix for one timestep, regardless of TIME and TSTOP"
    args = dict(request.form)
    status_code, data = Mfix.do_command("STEP", args=args)
    return data, status_code, {'Content-Type': 'text/plain; charset=utf-8'}


@FLASK_APP.route('/start', methods=['PUT'])
def start():
    "starts MFIX if it's stopped"
    status_code, data = Mfix.do_command("BEGIN")
    return data, status_code, {'Content-Type': 'text/plain; charset=utf-8'}


@FLASK_APP.route('/stop', methods=['PUT'])
def stop():
    "stops MFIX if it's running"
    status_code, data = Mfix.do_command("HALT")
    return data, status_code, {'Content-Type': 'text/plain; charset=utf-8'}

@FLASK_APP.route('/residuals', methods=['GET'])
def get_residuals():
    "returns current residuals"
    status_code = 200
    global residuals
    return 'residuals are {}'.format(residuals), status_code, {'Content-Type': 'text/plain; charset=utf-8'}

def parse_command_line_arguments():
    "handle command line arguments"
    port = 5000 # Flask default
    usage_string = "Usage: pymfix [-f, --file <mfix.dat>] [-h, --help] [-p,--print-flags] [-P, --port <port>] [-s, --start] [<keyword>=<keywordvalue> ...]"
    try:
        opts, keyword_args = getopt.getopt(sys.argv[1:], "f:hspP:", ["port=", ])
    except getopt.GetoptError:
        print(usage_string)
        sys.exit(1)

    for opt, arg in opts:
        if opt in ("-f", "--file"):
            # Fortran strings need to be padded with blanks (ljust)
            MAIN.mfix_dat = arg.ljust(len(MAIN.mfix_dat))
        elif opt in ("-h", "--help"):
            print(usage_string)
            sys.exit(0)
        elif opt in ("-s", "--start"):
            Mfix.mfix_stopped = False
        elif opt in ("-p", "--print-flags"):
            MAIN.print_flags()
            sys.exit(1)
        elif opt in ("-P", "--port"):
            port = arg
            try:
                port = int(port)
                if port < 0 or port > 65536:
                    raise ValueError
            except ValueError:
                print("Invalid port: %d" % port)
                sys.exit(1)

    if len(keyword_args) > len(MAIN.cmd_line_args):
        print("Too many command line arguments: %d" % len(keyword_args))
        print("Only %d or fewer command line arguments are supported." % len(MAIN.cmd_line_args))
        sys.exit(1)

    return port, keyword_args

if __name__ == '__main__':
    main()
